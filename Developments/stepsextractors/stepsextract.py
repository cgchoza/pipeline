#!/usr/bin/env python
"""
    Pipestep Sextract

    This module defines the pipeline step to flux calibrate data files.
    The pipe step runs sextractor on the data and compares itentified
    sources with values from the StSci guide star catalog.

    Requirements: This step requires the source extractor program see
        https://www.astromatic.net/software/sextractor
      for details.

    Author: Amanda Pagul / Marc Berthoud / Daniel Sharkey

    Update 8/6/20 by Daniel Sharkey
    A majority of the code remains the same, it has just been separated into two seprate steps
   
"""
import os # os library
import sys # sys library
import numpy as np # numpy library
import scipy # scipy library
import string # string library
import logging # logging object library
import subprocess # running a subprocess library
import requests # http request library
import astropy.table # Read astropy tables
from astropy.io import fits
from astropy.io import ascii
from astropy.coordinates import SkyCoord # To make RA/Dec as float
from astropy import units as u # To help with SkyCoord
from astropy.stats import mad_std #to calculate STD for Rh
import matplotlib # to make plots
matplotlib.use('Agg') # Set pixel image
import pylab as plt # pylab library for plotting
from lmfit import minimize, Parameters # For brightness correction fit
from darepype.drp import StepParent # pipestep stepparent object

class StepSextract(StepParent):
    """ Pipeline Step Object to calibrate Bias/Dark/Flat files
    """

    stepver = '0.1' # pipe step version


    def setup(self):
        """ ### Names and Parameters need to be Set Here ###
            Sets the internal names for the function and for saved files.
            Defines the input parameters for the current pipe step.
            The parameters are stored in a list containing the following
            information:
            - name: The name for the parameter. This name is used when
                    calling the pipe step from command line or python shell.
                    It is also used to identify the parameter in the pipeline
                    configuration file.
            - default: A default value for the parameter. If nothing, set
                       '' for strings, 0 for integers and 0.0 for floats
            - help: A short description of the parameter.
        """
        ### Set Names
        # Name of the pipeline reduction step
        self.name='sextract'
        # Shortcut for pipeline reduction step and identifier for
        # saved file names.
        self.procname = 'sext'
        # Set Logger for this pipe step
        self.log = logging.getLogger('pipe.step.%s' % self.name)
        ### Set Parameter list
        # Clear Parameter list
        self.paramlist = []
        # Append parameters
        
        self.paramlist.append(['sx_cmd', 'sex %s',
                               'Command to call source extractor, should contain ' +
                               '1 string placeholder for intput filepathname'])
        self.paramlist.append(['sx_options','',
                               'Command line options for source extractor ' +
                               '(This step overwrites the -c CATALOG_NAME PARAMETERS_NAME and ' +
                               'FILTER_NAME )'])
        self.paramlist.append(['sx_confilename','psf.sex',
                               'Filepathname for SourceExtractor configuration file'])
        self.paramlist.append(['sx_paramfilename','default.param',
                               'Filepathname for SourceExtractor parameter list file'])
        self.paramlist.append(['sx_filterfilename','default.conv',
                               'Filepathname for SourceExtractor filter file'])
        self.paramlist.append(['verbose',False,
                               'Flag to log full source extractor output at DEBUG level'])
        self.paramlist.append(['delete_cat',False,
                               'Flag to delete catalog file generated by ' +
                               'source extractor'])
        #self.paramlist.append(['fitplot',False,
         #                      'Flag for making png plot of the fit'])
        self.paramlist.append(['sourcetable',False,
                               'Flag for making txt table of all sources'])
        self.paramlist.append(['sourcetableformat','csv',
                               'txt table format (see astropy.io.ascii for options)'])
        self.paramlist.append(['savebackground',False,
                               'Flag for saving a background image'])
        # confirm end of setup
        self.log.debug('Setup: done')

    def run(self):
        """ Runs the calibrating algorithm. The calibrated data is
            returned in self.dataout
        """
        ### Preparation
        binning = self.datain.getheadval('XBIN')
        ### Run Source Extractor
        # Make sure input data exists as file
        if not os.path.exists(self.datain.filename) :
            self.datain.save()
        # Make catalog filename
        catfilename = self.datain.filenamebegin
        if catfilename[-1] in '._-': catfilename += 'sex_cat.fits'
        else: catfilename += '.sex_cat.fits'
        # Make background filename (may not be used - see below)
        bkgdfilename = self.datain.filenamebegin
        if bkgdfilename[-1] in '._-': bkgdfilename += 'SxBkgd.fits'
        else: bkgdfilename += '_SxBkgd.fits'
        self.log.debug('Sextractor catalog filename = %s' % catfilename)
        # Make command string
        command = self.getarg('sx_cmd') % (self.datain.filename)
        command += ' ' + self.getarg('sx_options')
        command += ' -c ' + os.path.expandvars(self.getarg('sx_confilename'))
        command += ' -CATALOG_NAME ' + catfilename
        command += ' -PARAMETERS_NAME ' + os.path.expandvars(self.getarg('sx_paramfilename'))
        command += ' -FILTER_NAME ' + os.path.expandvars(self.getarg('sx_filterfilename'))
        # Still make backgroundimage so you can subtract it below
        command += ' -CHECKIMAGE_TYPE BACKGROUND'
        command += ' -CHECKIMAGE_NAME ' + bkgdfilename
        # Call process
        self.log.debug('running command = %s' % command)
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        output, error = process.communicate()
        if self.getarg('verbose'):
            self.log.debug(output)
        #subprocess.check_call(command)
        ### Extract catalog from source extractor and clean up dataset
        # Use catalog from sourse extrator (test.cat)
        seo_catalog = astropy.table.Table.read(catfilename, format="fits", hdu='LDAC_OBJECTS')
        
        seo_Flux= seo_catalog['FLUX_AUTO']
        seo_Fluxerr=seo_catalog['FLUXERR_AUTO']
        seo_Mag = -2.5*np.log10(seo_catalog['FLUX_AUTO'])
        seo_MagErr = (2.5/np.log(10)*seo_catalog['FLUXERR_AUTO']/seo_catalog['FLUX_AUTO'])


        # Select only the stars in the image: circular image and S/N > 10
        elongation = (seo_catalog['FLUX_APER']-seo_catalog['FLUX_AUTO'])<250
        seo_SN = ((seo_catalog['FLUX_AUTO']/seo_catalog['FLUXERR_AUTO'])>10)
        seo_SN = (seo_SN) & (elongation) & ((seo_catalog['FLUX_AUTO']/seo_catalog['FLUXERR_AUTO'])<1000)
        self.log.debug('Selected %d stars from Source Extrator catalog' % np.count_nonzero(seo_SN))
        # Delete source extractor catalog is needed
        if self.getarg('delete_cat'):
            os.remove(catfilename)

        #Calculate Mean and STD for Rh to report
        rhmean, rhstd = np.nanmean(seo_catalog['FLUX_RADIUS']), mad_std(seo_catalog['FLUX_RADIUS'], ignore_nan = True)


        ind = np.argsort(seo_Flux)
        reverser = np.arange(len(ind) - 1,-1,-1)
        rev_ind = np.take_along_axis(ind, reverser, axis = 0)
        seo_catalog = np.take_along_axis(seo_catalog, rev_ind, axis = 0)
        ### Make table with all data from source extractor
        # Collect data columns
        cols = []
        num = np.arange(1, len(seo_catalog['X_IMAGE'][seo_SN]) + 1 )
        cols.append(fits.Column(name='ID', format='D',
                                array=num))
        cols.append(fits.Column(name='X', format='D',
                                array=seo_catalog['X_IMAGE'][seo_SN],
                                unit='pixel'))
        cols.append(fits.Column(name='Y', format='D',
                                array=seo_catalog['Y_IMAGE'][seo_SN],
                                unit='pixel'))
        cols.append(fits.Column(name='Uncalibrated Flux', format='D',
                                array=seo_Flux[seo_SN],
                                unit='flux'))
        cols.append(fits.Column(name='Uncalibrated Fluxerr', format='D',
                                array=seo_Fluxerr[seo_SN],
                                 unit='flux'))
        cols.append(fits.Column(name='Half Light Radius', format='D',
                                array=seo_catalog['FLUX_RADIUS'],
                                unit='pixel'))
        # Make table
        c = fits.ColDefs(cols)
        sources_table = fits.BinTableHDU.from_columns(c)
        
        ### Make output data
        # Copy data from datain
        self.dataout = self.datain

        # Add sources table
        self.dataout.tableset(sources_table.data,'Sources',sources_table.header)
        #Add RH mean and STD to header
        self.dataout.setheadval ('RHALF',rhmean, 'Mean half-power radius of stars (in pixels)')
        self.dataout.setheadval ('RHALFSTD', rhstd, 'STD of masked mean of half-power radius')
        
        # Remove background file if it's not needed
        if not self.getarg('savebackground'):
            os.remove(bkgdfilename)
        
        ### If requested make a text file with the sources list
        if self.getarg('sourcetable'):

            # Save region file

            filename = self.dataout.filenamebegin + 'FCALsources.reg'
            with open(filename, 'w+') as f:
                f.write("# Region file format: DS9 version 4.1\n")
                f.write("""global color=green dashlist=8 3 width=1 font="helvetica 10 normal roman" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1 image\n""")
                for i in range(len(seo_catalog['X_IMAGE'][seo_SN])):
                    f.write("circle(%.7f,%.7f,0.005) # text={%i}\n"%(seo_catalog['X_IMAGE'][seo_SN][i],seo_catalog['Y_IMAGE'][seo_SN][i],num[i]))

            # Save the table
            txtname = self.dataout.filenamebegin + 'FCALsources.txt'
            ascii.write(self.dataout.tableget('Sources'),txtname,
                        format = self.getarg('sourcetableformat'))
            self.log.debug('Saved sources table under %s' % txtname)



if __name__ == '__main__':
    """ Main function to run the pipe step from command line on a file.
        Command:
        python stepparent.py input.fits -arg1 -arg2 . . .
        Standard arguments:
        --config=ConfigFilePathName.txt : name of the configuration file
        --test : runs the functionality test i.e. pipestep.test()
        --loglevel=LEVEL : configures the logging output for a particular level
    """
    StepSextract().execute()

'''HISTORY:
2018-09-019 - Started based on Amanda's code. - Marc Berthoud
'''
